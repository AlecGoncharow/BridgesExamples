Summary: 	You will be implementing methods to calculate a Cosine Similarity Matrix of lines within a song. The resulting matrix will represent how similar every line in a song is to every other line in that song.
					To do this you will be creating Hashtables that represent a vector of each lines Term Frequency Inverse Document Frequency(TF-IDF) values. 
					
Instructions: The main method has been provided and you will be completing the methods supporting the main method.

	Variables: 
			String[][] corpus: This represents the entire body of work, all terms.
			
			String[] document: This represents a line in the song, already split and cleaned up for processing
			
			String term: This represents the current term which is currently being processed.
			
			Hashtable<String, Double> vector: This represents the vector of TF-IDF values used in the calculation of Cosine Similarity.
				The key is a String which is the term whose dimension is being represented by the Double value, which is the TF-IDF value of that term.
			
	Methods: 
			public static int termFrequency(String term, String[] document): 
				This method should return the frequency of a term within a document
		   
			public static boolean hasTerm(String term, String[] document): 
				This method should return a boolean indicating whether or not a term is within a document
			
			public static int documentsContainingTerm(String term, String[][] corpus): 
				This method should return the number of documents that contain at least one instance of some term
		  
			public static double inverseDocumentFrequency(String term, String[][] corpus): 
				This method should return the inverseDocumentFrequency of a term in a corpus which is
				the log of the number of documents in a corpus divided by 1 + documents containing that term
																																			
			public static double termFrequencyInverseDocumentFrequency(String term, String[] document, String[][] corpus):  
				This method should return the product of the termFrequency of a term in a document and
				the inverseDocumentFrequency of a term in a corpus

			public static String[] getUniqueTerms(String[][] corpus): 
				This method should return an array of all unique terms in the corpus
		  
			public static Hashtable<String, Double> vectorize(String[] document, String[][] corpus, String[] uniqueTerms):
				This method should create a new Hashtable, using each unique term as a key and the TFIDF value for that term as the value
			
			public static double cosine(Hashtable<String, Double> v1,  Hashtable<String, Double> v2): 
				This method should return the dotProduct of two vectors divided by the product of their norms
			
			public static double dotProduct(Hashtable<String, Double> v1,  Hashtable<String, Double> v2): 
				This method should return the dotProduct of two vectors, which is the sum of the product of every element in each vector
				for example: [4, 5, 6] * [1, 2, 3] = (4 * 1) + (5 * 2) + (6 * 3) = 32
			
			public static double norm(Hashtable<String, Double> vector): 
				This method should return the dotProduct of a vector with itself
			
		Optional: 
			There is an int array towards the end of the main method, RGBValues, which you may alter in order to augment the resulting matrix.